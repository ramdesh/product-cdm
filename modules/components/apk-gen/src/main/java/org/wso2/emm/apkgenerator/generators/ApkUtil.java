/*
 * Copyright (c) 2014 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.wso2.emm.apkgenerator.generators;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.shared.invoker.DefaultInvocationRequest;
import org.apache.maven.shared.invoker.DefaultInvoker;
import org.apache.maven.shared.invoker.InvocationRequest;
import org.apache.maven.shared.invoker.MavenInvocationException;
import org.wso2.emm.apkgenerator.exception.ApkGenerationException;
import org.wso2.emm.apkgenerator.exception.InvalidContentException;
import org.wso2.emm.apkgenerator.util.Constants;
import org.wso2.emm.apkgenerator.util.FileOperator;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/**
 * Using the BKS created earlier and the EMM agent source included, apk file can
 * be generated with this class. Also the final .zip output is generated here.
 */
public class ApkUtil {

	private static final Log LOG = LogFactory.getLog(ApkUtil.class);

	/**
	 * Carry out the sequence of tasks necessary to generate the apk.
	 *
	 * @param serverIp   The IP of the server, which the certificate will be used.
	 * @param password   The password of BKS store.
	 * @param zipPath    Folder and file which holds all the temporary files and final zip.
	 * @param workingDir Directory where the temporary files are saved.
	 * @throws ApkGenerationException
	 */
	public static void compileApk(String serverIp, String password, String zipPath,
	                              String workingDir)
			throws ApkGenerationException, InvalidContentException {
		changeContent(workingDir + Constants.FilePath.COMMON_UTIL, serverIp, password);
		buildApk(workingDir);
		// File paths of the four output files, that needs to be generated by
		// combining the directory user passes.
		String apkPath = workingDir + Constants.FilePath.ANDROID_AGENT_APK;
		String securityTruststorePath = workingDir + Constants.FilePath.WSO2CARBON_JKS;
		String clienTruststorePath = workingDir + Constants.FilePath.CLIENT_TRUST_JKS;
		String emmSecurityTruststorePath = workingDir + Constants.FilePath.WSO2EMM_JKS;

		// zip the above four files and create a zip file in the output folder.
		FileOperator.createZip(zipPath, new String[] { apkPath, securityTruststorePath,
		                                               clienTruststorePath,
		                                               emmSecurityTruststorePath });
	}

	/**
	 * Some configurations, such as server host name, trust store password has
	 * to be added to the source code of the EMM agent, prior to compiling it.
	 * This function will change the content of the commonUtils file of EMM
	 * Android agent code and inject IP address and password of the server which
	 * should be contacted.
	 *
	 * @param commonUtilPath The Android agent's CommonUtil class's file path.
	 * @param hostName       The server that the agent needs to communicate.
	 * @param password       The password of BKS store.
	 * @throws ApkGenerationException
	 */
	public static void changeContent(String commonUtilPath, String hostName, String password)
			throws ApkGenerationException, InvalidContentException {

		String content = FileOperator.readFile(commonUtilPath);
		if (content == null) {
			String message = "Error reading file " + commonUtilPath;
			LOG.error(message);
			throw new InvalidContentException(message);
		}
		int startIndex = content.indexOf(Constants.SERVER_IP_ANDROID);
		int lastIndex = content.indexOf("\";", startIndex);
		String changedContent =
				content.substring(0, startIndex) + Constants.SERVER_IP_ANDROID +
				hostName + content.substring(lastIndex);

		startIndex = changedContent.indexOf(Constants.TRUST_STORE_BKS);
		lastIndex = changedContent.indexOf("\";", startIndex);
		changedContent =
				changedContent.substring(0, startIndex) + Constants.TRUST_STORE_BKS +
				password + changedContent.substring(lastIndex);
		FileOperator.fileWrite(commonUtilPath, changedContent);
	}

	/**
	 * Build the apk using maven. This is where the actual android source
	 * compilation happens.
	 *
	 * @param workingDir Directory where the temporary files are saved.
	 * @throws ApkGenerationException
	 */
	public static void buildApk(String workingDir) throws ApkGenerationException {
		try {
			List<String> buildGoals = Arrays.asList(Constants.ACTION, Constants.GOAL);
			InvocationRequest request = new DefaultInvocationRequest();
			// Provide POM file to invoker
			request.setPomFile(new File(workingDir + Constants.FilePath.ANDROID_AGENT +
			                            File.separator));
			request.setGoals(buildGoals);
			DefaultInvoker invoker = new DefaultInvoker();
			// Retrieve Maven home
			invoker.setMavenHome(new File(getMavenHome(Constants.ENVIRONMENT_VARIABLE)));
			invoker.execute(request);
		} catch (MavenInvocationException e) {
			String message = "Error while executing maven invoker.";
			LOG.error(message, e);
			throw new ApkGenerationException(message, e);
		}
	}

	/**
	 * Retrieve Maven home path.
	 *
	 * @param environmentVar The environment variable that needs to be fetched.
	 * @return The path of the environment variable.
	 * @throws ApkGenerationException
	 */
	public static String getMavenHome(String environmentVar) throws ApkGenerationException {
		String path = System.getenv(Constants.ENVIRONMENT_VARIABLE);
		File homePath = new File(path);
		// Handle symlinks.
		String filePath;
		try {
			filePath = homePath.getCanonicalPath();
		} catch (IOException e) {
			LOG.error("Error when getting MAVEN_HOME: " + e.getMessage(), e);
			throw new ApkGenerationException("Error when getting MAVEN_HOME: " +
			                                 e.getMessage(), e);
		}
		if (filePath == null) {
			String message = "Error reading the value of " + environmentVar;
			LOG.error(message);
			throw new IllegalStateException(message);
		}
		// Maven invoker adds "bin/mvn" when setMavenHome is called. so if it is
		// present in the MAVEN_HOME, it has to be removed
		if (filePath.contains(Constants.FilePath.BIN_PATH)) {
			filePath = filePath.substring(0, filePath.indexOf(Constants.FilePath.BIN_PATH));
		}
		return filePath;
	}
}
